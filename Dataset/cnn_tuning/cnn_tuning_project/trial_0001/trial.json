{"trial_id": "0001", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "filters_1", "default": null, "conditions": [], "min_value": 32, "max_value": 64, "step": 32, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "filters_2", "default": null, "conditions": [], "min_value": 32, "max_value": 64, "step": 32, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "dropout_rate_1", "default": 0.2, "conditions": [], "min_value": 0.2, "max_value": 0.4, "step": 0.1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "filters_3", "default": null, "conditions": [], "min_value": 64, "max_value": 128, "step": 64, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "filters_4", "default": null, "conditions": [], "min_value": 64, "max_value": 128, "step": 64, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "dropout_rate_2", "default": 0.2, "conditions": [], "min_value": 0.2, "max_value": 0.4, "step": 0.1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "dense_units", "default": null, "conditions": [], "min_value": 64, "max_value": 128, "step": 64, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "dropout_rate_3", "default": 0.2, "conditions": [], "min_value": 0.2, "max_value": 0.4, "step": 0.1, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "optimizer", "default": "adam", "conditions": [], "values": ["adam", "rmsprop"], "ordered": false}}], "values": {"filters_1": 64, "filters_2": 32, "dropout_rate_1": 0.30000000000000004, "filters_3": 64, "filters_4": 128, "dropout_rate_2": 0.4, "dense_units": 128, "dropout_rate_3": 0.4, "optimizer": "rmsprop", "tuner/epochs": 2, "tuner/initial_epoch": 0, "tuner/bracket": 1, "tuner/round": 0}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"c:\\Users\\lxy03\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 274, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"c:\\Users\\lxy03\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 239, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\lxy03\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras_tuner\\src\\tuners\\hyperband.py\", line 427, in run_trial\n    return super().run_trial(trial, *fit_args, **fit_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\lxy03\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\lxy03\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 233, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\lxy03\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras_tuner\\src\\engine\\hypermodel.py\", line 149, in fit\n    return model.fit(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\lxy03\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\utils\\traceback_utils.py\", line 122, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"c:\\Users\\lxy03\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\models\\functional.py\", line 272, in _adjust_input_rank\n    raise ValueError(\nValueError: Exception encountered when calling Sequential.call().\n\n\u001b[1mInvalid input shape for input Tensor(\"data:0\", shape=(None, 1, 15), dtype=float32). Expected shape (None, 32, 32, 3), but input has incompatible shape (None, 1, 15)\u001b[0m\n\nArguments received by Sequential.call():\n  \u2022 inputs=tf.Tensor(shape=(None, 1, 15), dtype=float32)\n  \u2022 training=True\n  \u2022 mask=None\n"}